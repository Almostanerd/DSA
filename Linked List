//234 check LL palindrome

// brute:

class Solution {
public:
    bool isPalindrome(ListNode* head) {

        stack <int> st;
        ListNode* temp= head;

        while(temp!=NULL){
            st.push(temp->val);
            temp=temp->next;
        }

        temp= head;

        while(temp!=NULL){

            if(temp->val != st.top()){
                return false;
            }

            st.pop();
            temp= temp->next;
        }


        return true;
        
    }
};


// tc =o(2n)=o(n), sc=o(n) for stack


// optimal:  (also includes reverse LL and tortoise hare slow fast mid point)

class Solution {
public:

    ListNode* reverse(ListNode* head){
      
      if(head==NULL || head->next==NULL){
        return head;
      }

      ListNode* newHead= reverse(head->next);

      ListNode* front= head->next;
      front->next=head;
      head->next=NULL;

      return newHead;
    }
    bool isPalindrome(ListNode* head) {

       if(head==NULL || head->next==NULL){
        return true;
       }

       ListNode* slow= head;
       ListNode* fast= head;

       while(fast->next!=NULL && fast->next->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
       }

       ListNode* newHead= reverse(slow->next);

       ListNode* first=head;
       ListNode* second=newHead;

       while(second!=NULL){

        if (first->val != second->val){
            reverse(newHead);
            return false;
        }
        first=first->next;
        second=second->next;
       }

       reverse(newHead);
       return true;


        
    }
};


// tc : o(n)...sc: o(1)...actually o(n) if we consider stack space for recursion
